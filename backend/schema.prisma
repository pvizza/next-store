// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String        @id @default(cuid())
  name                    String        @default("")
  password                String
  email                   String        @unique @default("")
  isAdmin                 Boolean       @default(false)
  cart                    CartProduct[] @relation("CartProduct_user")
  products                Product[]     @relation("Product_user")
  orders                  Order[]       @relation("Order_user")
  role                    Role?         @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?       @map("role")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Product {
  id                       String         @id @default(cuid())
  name                     String         @default("")
  price                    Float
  description              String         @default("")
  status                   String?        @default("stock")
  photo                    ProductImage[] @relation("ProductImage_product")
  user                     User?          @relation("Product_user", fields: [userId], references: [id])
  userId                   String?        @map("user")
  from_CartProduct_product CartProduct[]  @relation("CartProduct_product")

  @@index([userId])
}

model ProductImage {
  id                   String      @id @default(cuid())
  image                String?
  title                String      @default("")
  product              Product?    @relation("ProductImage_product", fields: [productId], references: [id])
  productId            String?     @map("product")
  from_OrderCart_photo OrderCart[] @relation("OrderCart_photo")

  @@index([productId])
}

model CartProduct {
  id        String   @id @default(cuid())
  units     Int      @default(1)
  product   Product? @relation("CartProduct_product", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartProduct_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

model Order {
  id     String      @id @default(cuid())
  item   OrderCart[] @relation("OrderCart_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId String?     @map("user")
  total  Int?

  @@index([userId])
}

model OrderCart {
  id          String         @id @default(cuid())
  name        String         @default("")
  price       Float
  description String         @default("")
  photo       ProductImage[] @relation("OrderCart_photo")
  units       Int?
  order       Order?         @relation("OrderCart_order", fields: [orderId], references: [id])
  orderId     String?        @map("order")

  @@index([orderId])
}

model Role {
  id                String  @id @default(cuid())
  name              String  @default("")
  canManageProducts Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}